{"version":3,"sources":["state/history.js","views/components/navbar.js","views/components/pollenormold.js","views/components/chart.js","state/API.js","state/actions/days_actions.js","state/actions/feelings_actions.js","views/components/feelingsForm.js","views/components/welcome.js","views/containers/home.js","views/components/userForm.js","state/actions/user_actions.js","views/components/feelingsCard.js","views/containers/feelingsContainer.js","views/containers/user.js","views/components/userlist.js","views/components/login.js","views/containers/signup.js","views/components/daysForm.js","views/containers/days_container.js","App.js","serviceWorker.js","index.js","state/reducers/index.js","state/reducers/users_reducer.js","state/initial.js"],"names":["createHistory","NavBar","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","today","Date","activeItem","formatMonthDayYear","date","getMonth","getDate","getFullYear","handleItemClick","e","_ref","name","setState","handleLogout","props","logout","userLoggedIn","keys","currentUser","react_default","a","createElement","Menu","position","Item","as","Link","to","active","onClick","id","inherits","createClass","key","value","inverted","Component","pollenOrMold","includes","_Chart","render","days","Container","react_chartjs_2_es","data","Header","getDataset","daySet","spore","colorhue","Math","floor","random","label","map","day","Number","isNaN","borderColor","getHighest","sporeType","list","forEach","push","filter","item","sort","b","slice","getSporeList","pollens","molds","labels","fulldate","datasets","Chart","connect","API","days_actions","getDays","params","startdate","dates","toJSON","enddate","dispatch","fetch","then","resp","json","type","payload","feelings_actions","createFeeling","method","headers","Content-Type","Accept","Authorization","localStorage","getItem","body","JSON","stringify","feelings","getFeelings","userID","_FeelingsForm","onGoodClick","rating","user_id","onBadClick","Subheader","Form","Button","Group","size","icon","positive","labelPosition","Icon","Or","negative","FeelingsForm","Welcome","username","_Home","thisTimeLastYear","now","setFullYear","setDate","lastYearDays","longdate","join","welcome_Welcome","Home","_UserForm","email","password","handleOnChange","defineProperty","target","handleOnSubmit","preventDefault","location","pathname","match","editUser","objectSpread","closeForm","addUser","history","onSubmit","Input","placeholder","onChange","UserForm","withRouter","user_actions","login","loggingUser","user","error","deleteUser","returningUser","FeelingsCard","dateObject","getUTCDate","spores","index","List","color","sporeIcon","Content","renderBadSporeList","feeling","Card","Description","renderNotBadSporeList","isGoodFeeling","link","Meta","circular","_FeelingsContainer","todaysFeeling","find","feel","Divider","feelingsCard_FeelingsCard","loading","FeelingsContainer","_User","showEdit","dataOrEdit","primary","User","UserList","users","_this2","res","_Login","errorMessage","Message","header","content","errorBox","fluid","Login","_Signup","Signup","DaysFormPast","formParams","mindate","maxdate","mindetail","handleOnChangeCalendar","Grid","relaxed","columns","Column","entry","minDate","maxDate","minDetail","selectRange","calendarType","widths","readOnly","toDateString","DaysFormFuture","_Component2","_getPrototypeOf3","_len2","_key2","months","navigationLabel","_DaysContainer","pastOrFuture","url","disabled","daysForm_DaysFormFuture","daysForm_DaysFormPast","DaysContainer","_App","parse","Router","navbar_NavBar","Switch","Route","path","component","App","Boolean","window","hostname","middleware","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","currentState","action","prevState","undefined","setItem","token","removeItem","users_reducer","ReactDOM","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f44c7eee.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory'\n\nexport default createHistory()","import React, { Component } from \"react\";\nimport { Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nexport class NavBar extends Component {\n\n    state = {\n            today: new Date(),\n            activeItem: 'home'\n    }\n\n    formatMonthDayYear = (date) => {\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        const month = months[date.getMonth()]\n        const numDay = date.getDate()\n        const year = date.getFullYear()\n\n        return month + ' ' + numDay + ', ' + year\n    }\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n    handleLogout = (e) => {\n        this.props.logout()\n    }\n\n    userLoggedIn = () => {\n        const { activeItem } = this.state\n\n        if (Object.keys(this.props.currentUser).length === 0 || this.props.currentUser[\"error\"]) {\n            return (\n                <Menu.Menu position='right'>\n                    <Menu.Item as={Link} to='/signup' \n                    name='signup' \n                    active={activeItem === 'signup'} \n                    onClick={this.handleItemClick}>\n                        Sign Up\n                    </Menu.Item>\n                    <Menu.Item as={Link} to='/login' \n                    name='login' \n                    active={activeItem === 'login'} \n                    onClick={this.handleItemClick}>\n                        Login\n                    </Menu.Item>\n                    </Menu.Menu >\n            )\n        } else {\n            return (\n                <Menu.Menu position='right'>\n                    <Menu.Item as={Link} to={`/user/${this.props.currentUser.id}`}\n                        name='profile'\n                        active={activeItem === 'profile'}\n                        onClick={this.handleItemClick} >\n                        Profile\n                    </Menu.Item>\n                    <Menu.Item as={Link} to='/'\n                        name=\"logout\"\n                        onClick={this.handleLogout}\n                        active={activeItem === 'logout'} >\n                        Logout\n                    </Menu.Item>\n                </Menu.Menu >\n            )\n        }\n    }\n\n    render() {\n        const { activeItem } = this.state\n\n        return (\n            <Menu inverted>\n                <Menu.Item as={Link} to='/' \n                name='home' active={activeItem === 'home'} \n                onClick={this.handleItemClick}>\n                    <strong>\n                        WELCOME TO<br />\n                        POLLENDOME\n                    </strong>\n                </Menu.Item>\n                <Menu.Item as={Link} to='/future' name='forecast' active={activeItem === 'forecast'} \n                onClick={this.handleItemClick}>\n                    Forecast\n                </Menu.Item>\n                <Menu.Item as={Link} to='/past' \n                name='days' active={activeItem === 'days'} \n                onClick={this.handleItemClick}>\n                    Past Data\n                </Menu.Item>\n                <Menu.Item as={Link} to='/'\n                name='today' active={activeItem === 'today'} \n                onClick={this.handleItemClick}>\n                    {this.formatMonthDayYear(this.state.today)}\n                </Menu.Item>\n                {this.userLoggedIn()}\n            </Menu>\n        )\n    }\n}\n","\nconst pollenOrMold = (name) => {\n   \n    const mold_names = [\"acrodictys\", \"agrocybe\", \"algae\", \"alternaria\", \"arthimium\", \"ascomycetes\", \"asperisporium\", \"basidiomycetes\", \"beltrania\", \"botrytis\", \"cercospora\", \"cladosporium\", \"curvularia\", \"d_conidia_hyphae\", \"dendryphiella\", \"drechslera_helmintho\", \"dichotomophthora\", \"diplococcum\", \"epicoccum\", \"fusariella\", \"ganoderma\", \"helicomina\", \"microsporum\", \"misc_fungus_hyaline\", \"monodictys\", \"myxomycete_smut\", \"nigrospora\", \"penicillium_aspergillus\", \"periconia\", \"pestalotiopsis\", \"pithomyces\", \"powdery_mildew\", \"pseudocercospora\", \"puccinia\", \"rust\", \"spegazinia\", \"stemphyllium\", \"tetrapola\", \"tilletia\", \"torula\"]\n    \n    const pollen_names = [\"ash\", \"birch\", \"cotton_wood\", \"dogwood\", \"elm\", \"glandular_mesquite\", \"hackberry\", \"hickory\", \"mulberry\", \"maple\", \"osage_orange\", \"oak\", \"sycamore\", \"pine\", \"privet\", \"sweet_gum\", \"gingko_biloba\", \"amaranth\", \"burweed___marshelder\", \"cattail\", \"dog_fennel\", \"lambs_quarters\", \"ragweed\", \"rumex\", \"sagebrush\", \"saltbrush\", \"sedge\", \"ashe_juniper___bald_cypress\", \"bushes\", \"willow\", \"sneezeweed\", \"black_gum\", \"other_weed\", \"other_tree\", \"plantago\", \"partridge_pea\", \"black_walnut\", \"pigweed\", \"alder\", \"cedar\", \"hazelnut\", \"plum_grannet\", \"walnutjuglans\", \"aster\", \"nettle\", \"walnut\", \"magnolia\", \"wild_carrot\", \"willow\"]\n\n    if (mold_names.includes(name)) {\n        return 'mold'\n    } else if (pollen_names.includes(name)) {\n        return 'pollen'\n    } else {\n        return \"?\"\n    }\n}\n\nexport { pollenOrMold }","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Line } from 'react-chartjs-2'\nimport { Header, Container } from 'semantic-ui-react';\nimport { pollenOrMold } from './pollenormold';\n\nclass _Chart extends Component {\n\n    render = () => {\n        if (this.props.days && this.props.days.length !== 0) {\n            return (\n                <Container>\n                    <Line data={this.data(this.props.days)}/>\n                </Container>\n                );\n        } else {\n            return <Header>There is no data available for the requested days</Header>\n        }\n    }\n\n    getDataset = (daySet, spore) => {\n        let colorhue;\n        if (pollenOrMold(spore) === 'mold'){\n            // teal, blue, purple\n            colorhue = Math.floor(Math.random() * 125 + 175)\n        } else if (pollenOrMold(spore) === 'pollen') {\n            // red to green\n            colorhue = Math.floor(Math.random() * 125)\n        } else {\n            // red\n            colorhue = 360\n        }\n\n        return {\n            label: spore,\n            data: daySet.map((day) => {\n                const value = Number(day[`${spore}`])\n                if (isNaN(value)) {\n                    return 0\n                } else {\n                    return value\n                }\n            }),\n            borderColor: `hsla(${colorhue}, 80%, 45%, 1)`\n        }\n    }\n\n    getHighest = (day, sporeType) => {\n        let list = []\n        Object.keys(day).forEach( key => {\n            if (sporeType === pollenOrMold(key)) {\n                list.push(key)\n            }\n        })\n        const limitedList = list.filter((item) => Number(day[item]) > 0)\n        const sortedList = limitedList.sort((a,b) => b-a)\n\n        return sortedList.slice(0, 4)\n\n    }\n    getSporeList = (day) => {\n        const pollens = this.getHighest(day, \"pollen\")\n        const molds = this.getHighest(day, \"mold\")\n\n        return pollens.concat(molds)\n    }\n\n    data = (days) => {\n        if (days && days.length > 0) {\n            return ({\n                labels: days.map(day => {\n                    return day.fulldate.slice(5)\n                }),\n                datasets: this.getSporeList(days[0]).map(spore => {\n                    return this.getDataset(days, spore)\n                })\n            })\n        } else {\n            return ({\n                labels: [],\n                datasets: []\n            })\n        }\n    };\n}\n\n\nconst mapStateToProps = (state) => ({\n    days: state.days\n})\n\nexport const Chart = connect(mapStateToProps)(_Chart);\n","export const API = process.env.NODE_ENV === 'development' ? 'http://localhost:3000/api/v1/' : 'https://pollendome.herokuapp.com//api/v1'","import { API } from '../API';\n\nexport const days_actions = {\n\n    getDays(params) {\n        const startdate = params.dates[0].toJSON().slice(0, 10)\n        const enddate = params.dates[1].toJSON().slice(0, 10)\n        return function (dispatch) {\n            fetch(`${API}/days/find?startdate=${startdate}&enddate=${enddate}`)\n                .then(resp => resp.json())\n                .then(days => dispatch({ type: \"GET_DAYS\", payload: days }))\n        }\n    },\n}","import { API } from '../API';\n\nexport const feelings_actions = {\n\n    createFeeling(payload) {\n        return function (dispatch) {\n            fetch(`${API}/feelings`, {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(payload)\n            })\n                .then(resp => resp.json())\n                .then(feelings => dispatch({ type: \"GET_FEELINGS\", payload: feelings }))\n        }\n    },\n\n    getFeelings(userID) {\n        return function (dispatch) {\n            fetch(`${API}/feelings/?userid=${userID}`, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n                }\n            })\n                .then(resp => resp.json())\n                .then(feelings => dispatch({ type: \"GET_FEELINGS\", payload: feelings }))\n        }\n    }\n}","import React, { Component } from 'react';\nimport { Header, Form, Container, Icon, Button } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { feelings_actions } from '../../state/actions/feelings_actions';\n\nclass _FeelingsForm extends Component {\n\n    state = {\n        today: this.props.date\n    }\n\n    onGoodClick = (e) => {\n        this.props.createFeeling({\n            rating: 5,\n            user_id: this.props.currentUser.id,\n            fulldate: this.state.today\n        })\n    }\n\n    onBadClick = (e) => {\n        this.props.createFeeling({\n            rating: 0,\n            user_id: this.props.currentUser.id,\n            fulldate: this.state.today\n        })\n    }\n\n    render() {\n        return (\n            <Container>\n                <Header.Subheader>How do you feel today?</Header.Subheader>\n                <Form>\n                    <Button.Group size='small'>\n                        <Button icon positive labelPosition='left' onClick={this.onGoodClick} >\n                            <Icon name='thumbs up' />\n                            A-okay!\n                        </Button>\n                        <Button.Or/>\n                        <Button icon negative labelPosition='right' onClick={this.onBadClick}>\n                            Ugh\n                            <Icon name='thumbs down' />\n                        </Button>\n                    </Button.Group>\n                </Form>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUser: state.currentUser\n})\n\nexport const FeelingsForm = connect(mapStateToProps, feelings_actions)(_FeelingsForm);\n","import React, { Component } from 'react';\nimport { Container, Header } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { FeelingsForm } from './feelingsForm';\n\nexport class Welcome extends Component {\n    \n    state = {\n        date: new Date()\n    }\n\n    userLoggedIn = () => {\n        if (Object.keys(this.props.currentUser).length === 0 || this.props.currentUser[\"error\"]) {\n            return (\n                <Container>\n                    <Header>Welcome!<br /> Would you like to <Link to=\"/login\">log in,</Link> or <Link to='/signup'>create a new account?</Link> </Header>\n                    <Header.Subheader>Logging in allows us to keep track of how you feel on a given day, which helps our predictions</Header.Subheader>\n                </Container>\n            )\n        } else {\n            return (\n                <Container>\n                    <Header>Welcome back, {this.props.currentUser.username}! </Header>\n                    {this.props.feelings.length === 0 && <FeelingsForm date={this.state.date} />}\n                </Container>\n            )\n        }\n    }\n    \n    render() {\n        return (\n            <Container>\n                {this.userLoggedIn()}\n            </Container>\n        );\n    }\n}\n\n// export default Welcome;\n","import React, { Component } from \"react\";\nimport { Chart } from '../components/chart';\nimport { Container, Header } from \"semantic-ui-react\";\nimport { connect } from 'react-redux';\nimport { days_actions } from '../../state/actions/days_actions';\nimport { Welcome } from \"../components/welcome\";\n\nclass _Home extends Component {\n\n    thisTimeLastYear = () => {\n        const now = new Date()\n        now.setFullYear(now.getFullYear()-1)\n        let then = new Date(now)\n        then.setDate(now.getDate()-10)\n        return [then, now]\n    }\n\n    componentDidMount() { \n        this.props.getDays({ dates: this.thisTimeLastYear() })\n    }\n    \n    render() {\n        const onlyADayArray = this.thisTimeLastYear().map( longdate => `${longdate.getMonth()+1}/${longdate.getDate()}/${longdate.getFullYear()}`)\n        const lastYearDays = onlyADayArray.join(' to ')\n        return (\n            <Container>\n                <Welcome currentUser={this.props.currentUser} feelings={this.props.feelings} />\n                <Header>Looking Back</Header>\n                <Header.Subheader>Allergen counts from {lastYearDays ? lastYearDays : \"this time last year\"}</Header.Subheader>\n                <Chart data={this.props.dates} />\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    days: state.days,\n    currentUser: state.currentUser,\n    feelings: state.feelings\n})\n\nexport const Home = connect(mapStateToProps, days_actions)(_Home);\n","import React, { Component } from 'react';\nimport { Form } from 'semantic-ui-react'\nimport { withRouter } from \"react-router\";\nimport history from '../../state/history';\n\nclass _UserForm extends Component {\n\n    state = {\n        username: this.props.currentUser.username,\n        email: this.props.currentUser.email,\n        password: ''\n    }\n\n    handleOnChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleOnSubmit = (e) => {\n        e.preventDefault()\n        if (this.props.location.pathname === `/user/${this.props.match.params.id}`) {\n            this.props.editUser({ ...this.state, id: this.props.currentUser.id })\n            this.props.closeForm()\n        }\n        if (this.props.location.pathname === '/signup') {\n            this.props.addUser(this.state)\n            history.push('/')\n        }\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleOnSubmit} >\n                <Form.Input \n                    name='username' \n                    value={this.state.username}\n                    placeholder='username'\n                    onChange = {this.handleOnChange} \n                />\n                <Form.Input \n                    name='email' \n                    value={this.state.email}\n                    placeholder='email'\n                    onChange = {this.handleOnChange} \n                />\n                <Form.Input \n                    name='password'\n                    type='password' \n                    value={this.state.password}\n                    placeholder='password'\n                    onChange = {this.handleOnChange} \n                />\n                <Form.Button>Submit</Form.Button>\n            </Form>\n        );\n    }\n}\n\nexport const UserForm = withRouter(_UserForm)\n","import { API } from '../API';\nimport history from '../history';\n\nexport const user_actions = {\n\n    login(loggingUser) {\n        return function(dispatch){\n            fetch(`${API}/auth`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                body: JSON.stringify( loggingUser )\n        })\n            .then(resp => resp.json())\n            .then(user => {\n                if (user.error) {\n                    dispatch({ type: \"ERROR_MESSAGE\", payload: user.error })\n                } else {\n                    dispatch({ type: \"LOGIN_USER\", payload: user })\n                    history.push(`/user/${user.id}`)\n                }\n            })\n        }\n    },\n\n    logout() {\n        return ({ type: \"LOGOUT_USER\" })\n    },\n\n    addUser(payload) {\n        return function(dispatch){\n            fetch(`${API}/users`, {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                body: JSON.stringify( payload )\n            })\n                .then(resp => resp.json())\n                .then(user => dispatch({type: \"LOGIN_USER\", payload: user}) )\n        }\n    },  \n\n    deleteUser(id) {\n        return function (dispatch) {\n            fetch(`${API}/users/${id}`, {\n                method: \"DELETE\",\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n                }\n            })\n                .then(() => dispatch({type: \"LOGOUT_USER\"}))\n        }\n    },\n\n    editUser(payload) {\n        return function (dispatch) {\n            fetch(`${API}/users/${payload.id}`, {\n                method: \"PATCH\",\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            })\n                .then(resp => resp.json())\n                .then(user => dispatch({type: \"EDIT_USER\", payload: user}))\n        }\n    },\n\n    returningUser(payload) {\n        return({ type: \"RETURNING_USER\", payload: payload})\n    },\n\n    getFeelings(userID) {\n        return function (dispatch) {\n            fetch(`${API}/feelings/user/${userID}`, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n                }\n            })\n                .then(resp => resp.json())\n                .then(feelings => dispatch({ type: \"GET_FEELINGS\", payload: feelings }))\n        }\n    }\n}","import React, { Component } from 'react';\nimport { Card, Icon, List, Container } from 'semantic-ui-react';\nimport { pollenOrMold } from './pollenormold';\n\nexport class FeelingsCard extends Component {\n\n    formatMonthDayYear = (date) => {\n            const dateObject = new Date(date)\n            const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n            const month = months[dateObject.getMonth()]\n            const numDay = dateObject.getUTCDate()\n            const year = dateObject.getFullYear()\n\n        return month + ' ' + numDay + ', ' + year\n    }\n\n    getHighest = (day, sporeType) => {\n        let list = []\n        Object.keys(day).forEach(key => {\n            if (sporeType === pollenOrMold(key)) {\n                list.push(key)\n            }\n        })\n        const limitedList = list.filter((item) => Number(day[item]) > 0)\n        const sortedList = limitedList.sort((a, b) => b - a)\n\n        return sortedList.slice(0, 4)\n\n    }\n    getSporeList = (day) => {\n        const spores = this.getHighest(day, \"pollen\").concat(this.getHighest(day, \"mold\"))\n        const sporeIcon = (spore) => {\n            if (pollenOrMold(spore) === 'pollen') {\n                return <List.Icon name=\"tree\" color=\"orange\"/>\n            } else {\n                return <List.Icon name=\"theme\" color=\"teal\" />\n            }\n        } \n\n        return (\n            spores.map((spore, index) => {\n                return <List.Item key={index} > \n                    {sporeIcon(spore)}\n                    <List.Content> {`${spore} (${day[spore]})`} </List.Content>\n                </List.Item>\n            })\n        )\n    }\n\n    renderBadSporeList = () => {\n        const spores = this.getSporeList(this.props.feeling.day)\n        if(spores.length === 0) {\n            return (\n                <Card.Description>If you're allergic to something, it looks like it wasn't in the air that day.</Card.Description>\n            )\n        } else {\n            return (\n                <Container>\n                    <Card.Description>You might be allergic to: (count/m³)</Card.Description>\n                    <List >\n                        {spores}\n                    </List>\n                </Container>\n            )\n        }\n    }\n\n    renderNotBadSporeList = () => {\n        const spores = this.getSporeList(this.props.feeling.day)\n        if(spores.length === 0) {\n            return null\n        } else {\n            return (\n                <Container>\n                    <Card.Description>You might not be allergic to: (count/m³)</Card.Description>\n                    <List>\n                        {spores}\n                    </List>\n                </Container>\n            )\n        }\n    }\n\n    render() {\n        let isGoodFeeling\n        if (this.props.feeling.feeling.rating > 3) {\n            isGoodFeeling = true\n        } else {\n            isGoodFeeling = false\n        }\n        return (\n            <Card link color={isGoodFeeling ? \"green\" : \"red\"} >\n                <Card.Content>\n                    <Icon name={isGoodFeeling ? 'thumbs up outline' : 'thumbs down outline'} color={isGoodFeeling ? \"green\" : \"red\"}/>\n                    <Card.Header>{this.formatMonthDayYear(this.props.feeling.day.fulldate)} </Card.Header>\n                    {isGoodFeeling ? this.renderNotBadSporeList() : this.renderBadSporeList()}\n                </Card.Content>\n                <Card.Meta>\n                    <Icon circular name=\"tree\" color=\"orange\" />pollen\n                    <Icon circular name=\"theme\" color=\"teal\" />mold\n                </Card.Meta>\n            </Card>\n        );\n    }\n}\n\n// export const FeelingsCard;\n","import React, { Component } from 'react';\nimport { Card, Container, Divider, Icon } from 'semantic-ui-react';\nimport { FeelingsCard } from '../components/feelingsCard';\nimport { FeelingsForm } from '../components/feelingsForm';\nimport { connect } from 'react-redux';\nimport { feelings_actions } from '../../state/actions/feelings_actions';\n\nclass _FeelingsContainer extends Component {\n\n    async componentDidMount() {\n        await this.props.currentUser\n        await this.props.getFeelings(this.props.currentUser.id)\n    }\n\n    todaysFeeling = () => {\n        if (this.props.feelings.find((feel) => feel.day.fulldate === this.props.date.toJSON().slice(0, 10))) {\n            return null\n        } else {\n            return <FeelingsForm date={this.props.date} />\n        }\n    }\n\n    render() {\n        if (this.props.feelings){\n            return (\n                <Container>\n                    {this.todaysFeeling()}\n                    <Divider />\n                    <Card.Group>\n                        {this.props.feelings.map(feeling => <FeelingsCard key={feeling.feeling.id} feeling={feeling} /> )}\n                        {/* <Card link color='blue'>\n                            <Card.Content>\n                            <Icon name=\"hand rock outline\" />\n                            <Card.Description>Add a feeling for another day</Card.Description>\n                            </Card.Content>\n                        </Card> */}\n                    </Card.Group>\n                </Container>\n            )\n        } else {\n            return <Icon loading name='spinner' />\n        }\n    }\n}\n\nexport const FeelingsContainer = connect(null, feelings_actions)(_FeelingsContainer);","import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\nimport { Header, Container, Icon, Button, Card } from 'semantic-ui-react'\nimport { UserForm } from \"../components/userForm\";\nimport { user_actions } from '../../state/actions/user_actions';\nimport { FeelingsContainer } from \"./feelingsContainer\";\n\nclass _User extends Component {\n\n    state = {\n        date: new Date(),\n        showEdit: false\n    }\n\n    async componentDidMount() {\n        if(this.props.currentUser.id) {\n            await this.props.getFeelings(this.props.currentUser.id)\n        }\n    }\n\n    dataOrEdit = () => {\n        if (this.state.showEdit) {\n            return <UserForm currentUser={this.props.currentUser} \n                closeForm={() => this.setState({ showEdit: false })} \n                editUser={this.props.editUser} />\n            \n        } else {\n            return(\n                <Container>\n                    <Card >\n                        <Header as='h2' icon>\n                            <Icon name='user circle' />\n                            {this.props.currentUser.username}\n                        </Header>\n                        <Header as='h4' icon>\n                            <Icon name='mail' />\n                            {this.props.currentUser.email}\n                        </Header>\n                        <Button.Group>\n                            <Button icon primary onClick={() => this.setState({ showEdit: true })}><Icon name=\"edit\"/>Edit</Button>\n                            <Button icon color='red' onClick={() => this.props.deleteUser(this.props.currentUser.id)}><Icon name=\"trash alternate\"/>Delete</Button>\n                        </Button.Group>\n                    </Card>\n                    <br />\n                    <FeelingsContainer currentUser={this.props.currentUser} feelings={this.props.feelings} date={this.state.date} />\n                </Container>\n            )\n        }\n    }\n\n    render() {\n        return(\n            this.dataOrEdit()\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentUser: state.currentUser,\n    feelings: state.feelings\n})\n\nexport const User = connect(mapStateToProps, user_actions)(_User)","import React, { Component } from 'react';\nimport { Container, Card } from 'semantic-ui-react';\nimport { API } from '../../state/API';\nimport { Link } from 'react-router-dom';\n\nexport class UserList extends Component {\n\n    state = {\n        users: []\n    }\n\n    componentDidMount(){\n        fetch(`${API}/users`)\n            .then(res => res.json())\n            .then(users => {\n                this.setState({ users });\n            });\n    }\n\n    render() {\n        return (\n            <Container>\n                {this.state.users.map( (user, index) => {\n                    return  (\n                        <Card key={index} >\n                            <Card.Content>\n                                <Card.Header as={Link} to={`/user/${user.id}`} >{user.username}</Card.Header>\n                                <Card.Description>{user.email}</Card.Description>\n                            </Card.Content>\n                        </Card>\n                    )\n                })}\n            </Container>\n        );\n    }\n}\n\n","import React, { Component } from \"react\";\nimport { Form, Container, Icon, Header, Message } from 'semantic-ui-react'\nimport { user_actions } from '../../state/actions/user_actions';\nimport { connect } from 'react-redux';\n\nclass _Login extends Component {\n\n    state = {\n        email: '',\n        password: ''\n    }\n\n    handleOnChange = (e) => {\n        this.setState({ \n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleOnSubmit = (e) => {\n        e.preventDefault()\n        this.props.login(this.state)\n    }\n\n    errorBox() {\n        let errorMessage = this.props.error\n        if (errorMessage){\n            return <Message negative \n                header=\"Unable to login\"\n                content={errorMessage} />\n        }\n    }\n\n    render(){\n        return (\n            <Container>\n                {this.errorBox()}\n                <Header as='h2' icon>\n                    <Icon name='sign-in' />\n                    Log In\n                    <Header.Subheader>How are you feeling today?</Header.Subheader>\n                </Header>\n                <Form onSubmit={this.handleOnSubmit} >\n                    <Form.Input fluid \n                        name='email' \n                        label='Email' \n                        value={this.state.email} \n                        onChange = {this.handleOnChange} \n                        />\n                    <Form.Input fluid \n                        name='password' \n                        label='Password' \n                        value={this.state.password} \n                        type='password' \n                        onChange={this.handleOnChange} \n                        />\n                        <Form.Button>Login</Form.Button>\n                </Form>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentUser: state.currentUser,\n    error: state.error\n})\n\nexport const Login = connect(mapStateToProps, user_actions)(_Login)","import React, { Component } from 'react';\nimport { Header, Icon, Container } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { UserForm } from '../components/userForm';\nimport { user_actions } from '../../state/actions/user_actions';\n\nclass _Signup extends Component {\n    render() {\n        return (\n            <Container>\n                <Header as='h2' icon>\n                    <Icon name='signup' />\n                    Sign Up\n                    <Header.Subheader>Over time, you can learn what pollens or molds you're allergic to</Header.Subheader>\n                </Header>\n                <UserForm currentUser={{username: '', email: ''}} addUser={this.props.addUser} />\n            </Container>\n        );\n    }\n}\n\n\nexport const Signup = connect(null, user_actions)(_Signup);\n","import React, { Component } from 'react';\nimport { Form, Grid } from 'semantic-ui-react';\nimport { Calendar } from 'react-calendar'\n\nexport class DaysFormPast extends Component {\n\n    state = {\n        dates: [\n            new Date('2015-02-01'),\n            new Date('2015-04-31')\n        ],\n        formParams: {\n            mindate: new Date(\"2013-01-01\"),\n            maxdate: new Date(\"2999-12-31\"),\n            mindetail: 'decade',\n        }\n    }\n\n    handleOnChangeCalendar = date => this.setState({ dates: date })\n        \n    handleOnSubmit = (e) => {\n        e.preventDefault()\n        this.props.getDays(this.state)\n    }\n        \n    render() {\n\n        return (\n            <Form onSubmit={this.handleOnSubmit} >\n                <Form.Button color='blue'>Submit</Form.Button>\n                <Grid relaxed columns={2}>\n                    <Grid.Column>\n                        <Calendar \n                            minDate={this.state.formParams.mindate}\n                            maxDate={this.state.formParams.maxdate}\n                            minDetail={this.state.formParams.mindetail}\n                            selectRange={true}\n                            onChange={this.handleOnChangeCalendar}\n                            value={this.state.dates}\n                            calendarType=\"US\"\n                        />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Group widths='equal'>\n                            <Form.Input readOnly fluid label=\"Start Date\" value={this.state.dates[0].toDateString().slice(4, 15)} />\n                            <Form.Input readOnly fluid label=\"End Date\" value={this.state.dates[1].toDateString().slice(4, 15)} />\n                        </Form.Group>\n                    </Grid.Column>\n                </Grid>\n            </Form>\n        );\n    }\n}\n\nexport class DaysFormFuture extends Component {\n\n    state = {\n        dates: [\n            new Date('2019-01-03'),\n            new Date('2019-01-31')\n        ],\n        formParams: {\n            mindate: new Date(\"2019-01-01\"),\n            maxdate: new Date(\"2019-12-31\"),\n            mindetail: 'year',\n        }\n    }\n\n    handleOnChangeCalendar = date => this.setState({ dates: date })\n        \n    handleOnSubmit = (e) => {\n        e.preventDefault()\n        this.props.getDays(this.state)\n    }\n        \n    render() {\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\n        return (\n            <Form onSubmit={this.handleOnSubmit} >\n                <Form.Button color='blue'>Submit</Form.Button>\n                <Grid relaxed columns={2}>\n                    <Grid.Column>\n                        <Calendar \n                            navigationLabel={({ date }) => `${months[date.getMonth()]}`}\n                            minDate={this.state.formParams.mindate}\n                            maxDate={this.state.formParams.maxdate}\n                            minDetail={this.state.formParams.mindetail}\n                            selectRange={true}\n                            onChange={this.handleOnChangeCalendar}\n                            value={this.state.dates}\n                            calendarType=\"US\"\n                        />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Group widths='equal'>\n                            <Form.Input readOnly fluid label=\"Start Date\" value={this.state.dates[0].toDateString().slice(4, 10)} />\n                            <Form.Input readOnly fluid label=\"End Date\" value={this.state.dates[1].toDateString().slice(4, 10)} />\n                        </Form.Group>\n                    </Grid.Column>\n                </Grid>\n            </Form>\n        );\n    }\n}\n\n// export default DaysForm;\n","import React, { Component } from 'react';\nimport { Container, Divider, Header } from 'semantic-ui-react';\nimport { DaysFormPast } from '../components/daysForm';\nimport { DaysFormFuture } from '../components/daysForm';\nimport { connect } from 'react-redux';\nimport { days_actions } from '../../state/actions/days_actions';\nimport { Chart } from '../components/chart';\nimport { withRouter } from 'react-router';\n\nclass _DaysContainer extends Component {\n\n    pastOrFuture = (url) => {\n        if (url === '/future') {\n            return (\n                <Container>\n                    <Header>Get forecasts for coming days</Header>\n                    <Chart days={this.props.days} />\n                    <Header.Subheader disabled>Average reading for a given day of the year</Header.Subheader>\n                    <Divider />\n                    <DaysFormFuture getDays={this.props.getDays} />\n                </Container>\n\n            );\n        } else if (url === '/past') {\n\n            return (\n                <Container>\n                    <Header>See data for past dates</Header>\n                    <Chart days={this.props.days} />\n                    <Header.Subheader disabled>Readings are not available for all days</Header.Subheader>\n                    <Divider />\n                    <DaysFormPast getDays={this.props.getDays} />\n                </Container>\n\n            ) \n        }\n\n    }\n\n    render() {\n        return this.pastOrFuture(this.props.location.pathname)\n    }\n}\n\nconst mapStateToProps = state => ({\n    days: state.days\n})\n\nexport const DaysContainer = withRouter(connect(mapStateToProps, days_actions)(_DaysContainer));\n","import React, { Component } from 'react';\nimport { Router } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router\";\nimport { connect } from \"react-redux\";\nimport history from \"./state/history\";\nimport { NavBar } from \"./views/components/navbar\";\nimport { Home } from \"./views/containers/home\";\nimport { User } from \"./views/containers/user\";\nimport { UserList } from \"./views/components/userlist\"\nimport { Login } from \"./views/components/login\";\nimport { Signup } from \"./views/containers/signup\";\nimport { user_actions } from './state/actions/user_actions';\nimport { DaysContainer } from './views/containers/days_container';\n\nclass _App extends Component {\n\n  componentDidMount(){\n    const currentUser = localStorage.getItem(\"currentUser\")\n    if (currentUser) {\n      this.props.returningUser(JSON.parse(currentUser))\n    }\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <div>\n          <NavBar currentUser = {this.props.currentUser} logout = {this.props.logout} />\n          <Switch>\n            <Route path=\"/past\" component={DaysContainer} />\n            <Route path=\"/future\" component={DaysContainer} />\n            <Route path=\"/signup\" component={Signup} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/user/:id\" render = {(props) => <User {...props} /> } />\n            <Route path=\"/user/\" component={UserList} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentUser: state.currentUser\n})\n\nexport const App = connect(mapStateToProps, user_actions)(_App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport thunk from 'redux-thunk'\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { rootReducer } from \"./state/reducers/index\";\nimport { initialState } from './state/initial';\nimport 'semantic-ui-css/semantic.min.css'\n\nconst middleware = compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\nconst store = createStore(rootReducer, initialState, middleware)\n\nReactDOM.render(<Provider store={store}> <App /> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { users_reducer } from \"./users_reducer\"\n\nexport const rootReducer = function(currentState, action){\n    let newState = users_reducer(currentState, action)\n\n    return newState\n}","export const users_reducer = function(prevState = {}, action) {\n    switch (action.type) {\n        case \"EDIT_USER\":\n            return {...prevState, currentUser: action.payload}\n\n        case \"LOGIN_USER\":\n            localStorage.setItem(\"token\", action.payload.token)\n            localStorage.setItem(\"currentUser\", JSON.stringify(action.payload))\n            return {...prevState, currentUser: action.payload, error: null}\n\n        case \"LOGOUT_USER\":\n            localStorage.removeItem(\"token\")\n            localStorage.setItem(\"currentUser\", '')\n            localStorage.setItem(\"feelings\", '')\n            return {...prevState, currentUser: {}, feelings: []}\n\n        case \"RETURNING_USER\":\n            return { ...prevState, currentUser: action.payload}\n\n        case \"ERROR_MESSAGE\":\n            return { ...prevState, error: action.payload}\n\n        case \"GET_DAYS\":    \n            return {...prevState, days: action.payload}\n\n        case \"GET_FEELINGS\":    \n            return {...prevState, feelings: action.payload}\n    \n        default:\n            return prevState\n    }\n}","export const initialState = {\n    currentUser: {  },\n    feelings: []\n}"],"sourceRoot":""}