{"version":3,"sources":["state/history.js","views/components/navbar.js","state/API.js","state/actions/days_actions.js","state/store.js","state/reducers/index.js","state/reducers/users_reducer.js","state/initial.js","views/components/pollenormold.js","views/components/chart.js","state/actions/feelings_actions.js","views/components/feelingsForm.js","views/components/welcome.js","views/containers/home.js","views/components/userForm.js","state/actions/user_actions.js","views/components/feelingsCard.js","views/containers/feelingsContainer.js","views/containers/user.js","views/components/userlist.js","views/components/login.js","views/containers/signup.js","views/components/daysForm.js","views/containers/days_container.js","App.js","serviceWorker.js","index.js"],"names":["createHistory","NavBar","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","today","Date","activeItem","formatMonthDayYear","date","getMonth","getUTCDate","getFullYear","handleItemClick","e","_ref","name","setState","handleLogout","props","logout","userLoggedIn","keys","currentUser","react_default","a","createElement","Menu","position","Item","as","Link","to","active","onClick","id","inherits","createClass","key","value","stackable","fluid","inverted","Component","API","days_actions","getDays","params","startdate","dates","toJSON","slice","enddate","dispatch","type","fetch","then","resp","json","days","payload","getSpecies","species","middleware","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","currentState","action","prevState","undefined","objectSpread","localStorage","setItem","token","JSON","stringify","error","removeItem","feelings","isLoadingDays","users_reducer","pollenOrMold","getState","includes","_Chart","hidePollen","hideMold","handleGraphClick","defineProperty","target","render","isLoading","Icon","loading","size","Container","Button","Group","labeled","icon","toggle","content","labelPosition","Or","react_chartjs_2_es","data","options","Header","Subheader","disabled","getDataset","daySet","spore","colorhue","Math","floor","random","hidden","label","replace","yAxisID","map","day","Number","isNaN","borderColor","getHighest","sporeType","list","forEach","push","filter","item","sort","b","getSporeList","pollens","molds","labels","fulldate","datasets","scales","yAxes","scaleLabel","display","labelString","legend","Chart","connect","feelings_actions","createFeeling","method","headers","Content-Type","Accept","Authorization","getItem","body","getFeelings","userID","_FeelingsForm","onGoodClick","rating","user_id","onBadClick","Form","positive","negative","FeelingsForm","Welcome","username","_Home","thisTimeLastYear","now","setFullYear","setDate","getDate","lastYearDays","longdate","join","welcome_Welcome","Home","_UserForm","email","password","handleOnChange","handleOnSubmit","preventDefault","location","pathname","match","editUser","closeForm","addUser","history","onSubmit","Input","placeholder","onChange","UserForm","withRouter","user_actions","login","loggingUser","user","deleteUser","returningUser","FeelingsCard","dateObject","spores","index","List","color","sporeIcon","Content","renderBadSporeList","feeling","Card","Description","renderNotBadSporeList","isGoodFeeling","link","Meta","circular","_FeelingsContainer","todaysFeeling","find","feel","Divider","centered","feelingsCard_FeelingsCard","FeelingsContainer","_User","showEdit","dataOrEdit","areYouSneezy","vertical","primary","User","UserList","users","_this2","res","_Login","errorMessage","Message","header","errorBox","Login","_Signup","Signup","DaysFormPast","formParams","mindate","maxdate","mindetail","handleOnChangeCalendar","Grid","relaxed","columns","Column","entry","responsive","minDate","maxDate","minDetail","selectRange","calendarType","widths","readOnly","toDateString","DaysFormFuture","_Component2","_getPrototypeOf3","_len2","_key2","months","navigationLabel","_DaysContainer","pastOrFuture","url","daysForm_DaysFormFuture","daysForm_DaysFormPast","DaysContainer","_App","parse","Router","navbar_NavBar","Switch","Route","path","component","App","Boolean","hostname","ReactDOM","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f2c644b.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory'\n\nexport default createHistory()","import React, { Component } from \"react\";\nimport { Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nexport class NavBar extends Component {\n\n    state = {\n            today: new Date(),\n            activeItem: 'home'\n    }\n\n    formatMonthDayYear = (date) => {\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        const month = months[date.getMonth()]\n        const numDay = date.getUTCDate()\n        const year = date.getFullYear()\n\n        return month + ' ' + numDay + ', ' + year\n    }\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n    handleLogout = (e) => {\n        this.props.logout()\n    }\n\n    userLoggedIn = () => {\n        const { activeItem } = this.state\n\n        if (Object.keys(this.props.currentUser).length === 0 || this.props.currentUser[\"error\"]) {\n            return (\n                <Menu.Menu position='right'>\n                    <Menu.Item as={Link} to='/signup' \n                    name='signup' \n                    active={activeItem === 'signup'} \n                    onClick={this.handleItemClick}>\n                        Sign Up\n                    </Menu.Item>\n                    <Menu.Item as={Link} to='/login' \n                    name='login' \n                    active={activeItem === 'login'} \n                    onClick={this.handleItemClick}>\n                        Login\n                    </Menu.Item>\n                    </Menu.Menu >\n            )\n        } else {\n            return (\n                <Menu.Menu position='right'>\n                    <Menu.Item as={Link} to={`/user/${this.props.currentUser.id}`}\n                        name='profile'\n                        active={activeItem === 'profile'}\n                        onClick={this.handleItemClick} >\n                        Profile\n                    </Menu.Item>\n                    <Menu.Item as={Link} to='/'\n                        name=\"logout\"\n                        onClick={this.handleLogout}\n                        active={activeItem === 'logout'} >\n                        Logout\n                    </Menu.Item>\n                </Menu.Menu >\n            )\n        }\n    }\n\n    render() {\n        const { activeItem } = this.state\n\n        return (\n            <Menu stackable fluid inverted>\n                <Menu.Item as={Link} to='/' \n                name='home' active={activeItem === 'home'} \n                onClick={this.handleItemClick}>\n                    <strong>\n                        WELCOME TO<br />\n                        POLLENDOME\n                    </strong>\n                </Menu.Item>\n                <Menu.Item as={Link} to='/future' name='forecast' active={activeItem === 'forecast'} \n                onClick={this.handleItemClick}>\n                    Forecast\n                </Menu.Item>\n                <Menu.Item as={Link} to='/past' \n                name='days' active={activeItem === 'days'} \n                onClick={this.handleItemClick}>\n                    Past Data\n                </Menu.Item>\n                <Menu.Item as={Link} to='/'\n                name='today' active={activeItem === 'today'} \n                onClick={this.handleItemClick}>\n                    {this.formatMonthDayYear(this.state.today)}\n                </Menu.Item>\n                {this.userLoggedIn()}\n            </Menu>\n        )\n    }\n}\n","export const API = process.env.NODE_ENV === 'development' ? 'http://localhost:3000/api/v1' : 'https://pollendome.herokuapp.com//api/v1'","import { API } from '../API';\n\nexport const days_actions = {\n\n    getDays(params) {\n        const startdate = params.dates[0].toJSON().slice(0, 10)\n        const enddate = params.dates[1].toJSON().slice(0, 10)\n        return function (dispatch) {\n            dispatch({ type: \"LOADING\" })\n            fetch(`${API}/days/find?startdate=${startdate}&enddate=${enddate}`)\n                .then(resp => resp.json())\n                .then(days => dispatch({ type: \"GET_DAYS\", payload: days }))\n        }\n    },\n\n    getSpecies() {\n        return function (dispatch) {\n            fetch(`${API}/species`)\n                .then(resp => resp.json())\n                .then(species => dispatch({ type: \"GET_ALL_SPECIES\", payload: species }))\n        }\n    }\n}","import { rootReducer } from './reducers/index';\nimport { initialState } from './initial';\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, compose } from 'redux';\nimport { createStore } from 'redux';\n\nconst middleware = compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport const store = createStore(rootReducer, initialState, middleware)","import { users_reducer } from \"./users_reducer\"\n\nexport const rootReducer = function(currentState, action){\n    let newState = users_reducer(currentState, action)\n\n    return newState\n}","export const users_reducer = function(prevState = {}, action) {\n    switch (action.type) {\n        case \"EDIT_USER\":\n            return {...prevState, currentUser: action.payload}\n\n        case \"LOGIN_USER\":\n            localStorage.setItem(\"token\", action.payload.token)\n            localStorage.setItem(\"currentUser\", JSON.stringify(action.payload))\n            return {...prevState, currentUser: action.payload, error: null}\n\n        case \"LOGOUT_USER\":\n            localStorage.removeItem(\"token\")\n            localStorage.setItem(\"currentUser\", '')\n            localStorage.setItem(\"feelings\", '')\n            return {...prevState, currentUser: {}, feelings: []}\n\n        case \"RETURNING_USER\":\n            return { ...prevState, currentUser: action.payload}\n\n        case \"ERROR_MESSAGE\":\n            return { ...prevState, error: action.payload}\n\n        case \"GET_DAYS\":    \n            return {...prevState, days: action.payload, isLoadingDays: false}\n\n        case \"GET_FEELINGS\":    \n            return {...prevState, feelings: action.payload}\n        \n        case \"GET_ALL_SPECIES\":\n            return { ...prevState, species: action.payload}\n\n        case \"LOADING\":   \n            return {...prevState, isLoadingDays: true}\n    \n        default:\n            return prevState\n    }\n}","export const initialState = {\n    currentUser: {  },\n    feelings: []\n}","// TODO: programmatically derive pollen or mold names from backend and database\n\nimport { days_actions } from '../../state/actions/days_actions';\nimport { store } from '../../state/store';\n\nexport const pollenOrMold = (name) => {\n   \n    const mold_names = [\"acrodictys\", \"agrocybe\", \"algae\", \"alternaria\", \"arthimium\", \"ascomycetes\", \"asperisporium\", \"basidiomycetes\", \"beltrania\", \"botrytis\", \"cercospora\", \"cladosporium\", \"curvularia\", \"d_conidia_hyphae\", \"dendryphiella\", \"drechslera_helmintho\", \"dichotomophthora\", \"diplococcum\", \"epicoccum\", \"fusariella\", \"ganoderma\", \"helicomina\", \"microsporum\", \"misc_fungus_hyaline\", \"monodictys\", \"myxomycete_smut\", \"nigrospora\", \"penicillium_aspergillus\", \"periconia\", \"pestalotiopsis\", \"pithomyces\", \"powdery_mildew\", \"pseudocercospora\", \"puccinia\", \"rust\", \"spegazinia\", \"stemphyllium\", \"tetrapola\", \"tilletia\", \"torula\"]\n    \n    const tree_pollen_names = [\"alder\", \"ash\", \"ashe_juniper___bald_cypress\", \"black_gum\", \"black_walnut\", \"bushes\", \"birch\", \"cotton_wood\", \"dogwood\", \"elm\", \"glandular_mesquite\", \"hackberry\", \"hickory\", \"mulberry\", \"maple\", \"osage_orange\", \"oak\", \"sycamore\", \"pine\", \"privet\", \"sweet_gum\", \"gingko_biloba\", \"walnut\", \"willow\", \"willow\", \"other_tree\", \"cedar\", \"hazelnut\", \"plum_grannet\", \"walnutjuglans\", \"aster\", \"nettle\", \"magnolia\", \"wild_carrot\", ]\n\n    const weed_pollen_names = [\"amaranth\", \"burweed___marshelder\", \"cattail\", \"dog_fennel\", \"lambs_quarters\", \"partridge_pea\", \"pigweed\", \"plantago\", \"ragweed\", \"rumex\", \"sagebrush\", \"saltbrush\", \"sedge\", \"sneezeweed\", \"other_weed\"]\n\n    // this bit doesn't work, getting async issues and I don't know how to use async/await\n    const state = store.getState()\n\n    if (!state.species) {\n        store.dispatch(days_actions.getSpecies(name))\n    }\n\n    // state.species.forEach(singleSpecies => {\n    //     if (singleSpecies.name === name) {\n    //         return singleSpecies.species_type\n    //     }\n    //     return \"?\"\n    // })\n\n    if (mold_names.includes(name)) {\n        return 'mold'\n    } else if (tree_pollen_names.includes(name) || (weed_pollen_names.includes(name))) {\n        return 'pollen'\n    } else {\n        return \"?\"\n    }\n\n\n}\n\n// export default pollenOrMold","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Line } from 'react-chartjs-2'\nimport { Header, Container, Icon, Button } from 'semantic-ui-react';\nimport { pollenOrMold } from './pollenormold';\n\nclass _Chart extends Component {\n\n    state = {\n        hidePollen: false,\n        hideMold: false\n    }\n\n    handleGraphClick = (e) => {\n        this.setState({ [e.target.id]: !this.state[e.target.id] })\n    }\n\n    render = () => {\n        if (this.props.isLoading) {\n            return <Icon loading name=\"sun outline\" size=\"huge\" />\n        }\n        if (this.props.days && this.props.days.length !== 0) {\n            return (\n                <Container>\n                    <Button.Group size='tiny' labeled icon >\n                        <Button toggle active={!this.state.hidePollen} onClick={this.handleGraphClick} id='hidePollen' icon='tree' content='Pollen' labelPosition='right'/>\n                        <Button.Or />\n                        <Button toggle active={!this.state.hideMold} onClick={this.handleGraphClick} id='hideMold' icon='theme' content='Mold' labelPosition='right'/>\n                    </Button.Group>\n                    <Line data={this.data(this.props.days)} options={this.options}/>\n                    <Header.Subheader disabled>Readings are not available for all days</Header.Subheader>\n                </Container>\n                );\n        } else {\n            return <Header>There is no data available for the requested days</Header>\n        }\n    }\n\n    getDataset = (daySet, spore) => {\n        let colorhue;\n        if (pollenOrMold(spore) === 'mold'){\n            // teal, blue, purple\n            colorhue = Math.floor(Math.random() * 75 + 200)\n        } else if (pollenOrMold(spore) === 'pollen') {\n            // red to green\n            colorhue = Math.floor(Math.random() * 75)\n        } else {\n            // red\n            colorhue = 360\n        }\n        let hidden = false;\n        if (pollenOrMold(spore) ==='pollen'){\n            hidden = this.state.hidePollen\n        }\n        if (pollenOrMold(spore) ==='mold'){\n            hidden = this.state.hideMold\n        }\n        return {\n            label: spore.replace(\"___\", \" / \").replace(/_/g, \" \"),\n            yAxisID: pollenOrMold(spore),\n            hidden: hidden,\n            data: daySet.map((day) => {\n                const value = Number(day[`${spore}`])\n                if (isNaN(value)) {\n                    return 0\n                } else {\n                    return value\n                }\n            }),\n            borderColor: `hsla(${colorhue}, 80%, 45%, 1)`\n        }\n    }\n\n    // 5 highest species of pollen or mold\n    getHighest = (day, sporeType) => {\n        let list = []\n        Object.keys(day).forEach( key => {\n            if (sporeType === pollenOrMold(key)) {\n                list.push(key)\n            }\n        })\n        const limitedList = list.filter((item) => Number(day[item]) > 0)\n        \n        const sortedList = limitedList.sort((a, b) => Number(day[b]) - Number(day[a]))\n        return sortedList.slice(0, 4)\n    }\n\n    getSporeList = (day) => {\n        const pollens = this.getHighest(day, \"pollen\")\n        const molds = this.getHighest(day, \"mold\")\n        return pollens.concat(molds)\n    }\n\n    // build data object for passing into line chart\n    data = (days) => {\n        if (days && days.length > 0) {\n            return ({\n                labels: days.map(day => {\n                    return day.fulldate.slice(5)\n                }),\n                datasets: this.getSporeList(days[0]).map(spore => {\n                    return this.getDataset(days, spore)\n                })\n            })\n        } else {\n            return ({\n                labels: [],\n                datasets: []\n            })\n        }\n    }\n\n    // chartjs options\n    // TODO: color axes for low, medium, high levels\n    // TODO: do something with the legend box: https://www.chartjs.org/docs/latest/configuration/legend.html\n    // TODO: add tooltips on hover talking describing each species\n    options = {\n            scales: {\n                yAxes: [{\n                    id: \"pollen\",\n                    type: 'linear',\n                    position: 'left',\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Pollen count'\n                    }\n                }, {\n                    id: \"mold\",\n                    type: 'linear',\n                    position: 'right',\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Mold count'\n                    }\n                }]\n            },\n            legend: {\n                \n            }\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    days: state.days,\n    isLoading: state.isLoading\n})\n\nexport const Chart = connect(mapStateToProps)(_Chart);\n","import { API } from '../API';\n\nexport const feelings_actions = {\n\n    createFeeling(payload) {\n        return function (dispatch) {\n            fetch(`${API}/feelings`, {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n                },\n                body: JSON.stringify(payload)\n            })\n                .then(resp => resp.json())\n                .then(feelings => dispatch({ type: \"GET_FEELINGS\", payload: feelings }))\n        }\n    },\n\n    getFeelings(userID) {\n        return function (dispatch) {\n            fetch(`${API}/feelings/?userid=${userID}`, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n                }\n            })\n                .then(resp => resp.json())\n                .then(feelings => dispatch({ type: \"GET_FEELINGS\", payload: feelings }))\n        }\n    }\n}","import React, { Component } from 'react';\nimport { Header, Form, Container, Icon, Button } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { feelings_actions } from '../../state/actions/feelings_actions';\n\nclass _FeelingsForm extends Component {\n\n    state = {\n        today: this.props.date\n    }\n\n    onGoodClick = (e) => {\n        this.props.createFeeling({\n            rating: 5,\n            user_id: this.props.currentUser.id,\n            fulldate: this.state.today\n        })\n    }\n\n    onBadClick = (e) => {\n        this.props.createFeeling({\n            rating: 0,\n            user_id: this.props.currentUser.id,\n            fulldate: this.state.today\n        })\n    }\n\n    render() {\n        return (\n            <Container>\n                <Header.Subheader>How do you feel today?</Header.Subheader>\n                <Form>\n                    <Button.Group size='small'>\n                        <Button icon positive labelPosition='left' onClick={this.onGoodClick} >\n                            <Icon name='thumbs up' />\n                            A-okay!\n                        </Button>\n                        <Button.Or/>\n                        <Button icon negative labelPosition='right' onClick={this.onBadClick}>\n                            Ugh\n                            <Icon name='thumbs down' />\n                        </Button>\n                    </Button.Group>\n                </Form>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUser: state.currentUser\n})\n\nexport const FeelingsForm = connect(mapStateToProps, feelings_actions)(_FeelingsForm);\n","import React, { Component } from 'react';\nimport { Container, Header } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { FeelingsForm } from './feelingsForm';\n\nexport class Welcome extends Component {\n    \n    state = {\n        date: new Date()\n    }\n\n    userLoggedIn = () => {\n        if (Object.keys(this.props.currentUser).length === 0 || this.props.currentUser[\"error\"]) {\n            return (\n                <Container>\n                    <Header>Welcome!<br /> Would you like to <Link to=\"/login\">log in,</Link> or <Link to='/signup'>create a new account?</Link> </Header>\n                    <Header.Subheader>Logging in allows us to keep track of how you feel on a given day, which helps our predictions</Header.Subheader>\n                </Container>\n            )\n        } else {\n            return (\n                <Container>\n                    <Header>Welcome back, {this.props.currentUser.username}! </Header>\n                    {this.props.feelings.length === 0 && <FeelingsForm date={this.state.date} />}\n                </Container>\n            )\n        }\n    }\n    \n    render() {\n        return (\n            <Container>\n                {this.userLoggedIn()}\n            </Container>\n        );\n    }\n}\n\n// export default Welcome;\n","import React, { Component } from \"react\";\nimport { Chart } from '../components/chart';\nimport { Container, Header } from \"semantic-ui-react\";\nimport { connect } from 'react-redux';\nimport { days_actions } from '../../state/actions/days_actions';\nimport { Welcome } from \"../components/welcome\";\n\nclass _Home extends Component {\n\n    thisTimeLastYear = () => {\n        const now = new Date()\n        now.setFullYear(now.getFullYear()-1)\n        let then = new Date(now)\n        then.setDate(now.getDate()-10)\n        return [then, now]\n    }\n\n    componentDidMount() { \n        this.props.getDays({ dates: this.thisTimeLastYear() })\n    }\n    \n    render() {\n        const onlyADayArray = this.thisTimeLastYear().map( longdate => `${longdate.getMonth()+1}/${longdate.getDate()}/${longdate.getFullYear()}`)\n        const lastYearDays = onlyADayArray.join(' to ')\n        return (\n            <Container>\n                <Welcome currentUser={this.props.currentUser} feelings={this.props.feelings} />\n                <Header>Looking Back</Header>\n                <Header.Subheader>Allergen counts from {lastYearDays ? lastYearDays : \"this time last year\"}</Header.Subheader>\n                <Chart data={this.props.dates} />\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    days: state.days,\n    currentUser: state.currentUser,\n    feelings: state.feelings\n})\n\nexport const Home = connect(mapStateToProps, days_actions)(_Home);\n","import React, { Component } from 'react';\nimport { Form } from 'semantic-ui-react'\nimport { withRouter } from \"react-router\";\nimport history from '../../state/history';\n\nclass _UserForm extends Component {\n\n    state = {\n        username: this.props.currentUser.username,\n        email: this.props.currentUser.email,\n        password: ''\n    }\n\n    handleOnChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleOnSubmit = (e) => {\n        e.preventDefault()\n        if (this.props.location.pathname === `/user/${this.props.match.params.id}`) {\n            this.props.editUser({ ...this.state, id: this.props.currentUser.id })\n            this.props.closeForm()\n        }\n        if (this.props.location.pathname === '/signup') {\n            this.props.addUser(this.state)\n            history.push('/')\n        }\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleOnSubmit} >\n                <Form.Input \n                    name='username' \n                    value={this.state.username}\n                    placeholder='username'\n                    onChange = {this.handleOnChange} \n                />\n                <Form.Input \n                    name='email' \n                    value={this.state.email}\n                    placeholder='email'\n                    onChange = {this.handleOnChange} \n                />\n                <Form.Input \n                    name='password'\n                    type='password' \n                    value={this.state.password}\n                    placeholder='password'\n                    onChange = {this.handleOnChange} \n                />\n                <Form.Button>Submit</Form.Button>\n            </Form>\n        );\n    }\n}\n\nexport const UserForm = withRouter(_UserForm)\n","import { API } from '../API';\nimport history from '../history';\n\nexport const user_actions = {\n\n    login(loggingUser) {\n        return function(dispatch){\n            fetch(`${API}/auth`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                body: JSON.stringify( loggingUser )\n        })\n            .then(resp => resp.json())\n            .then(user => {\n                if (user.error) {\n                    dispatch({ type: \"ERROR_MESSAGE\", payload: user.error })\n                } else {\n                    dispatch({ type: \"LOGIN_USER\", payload: user })\n                    history.push(`/user/${user.id}`)\n                }\n            })\n        }\n    },\n\n    logout() {\n        return ({ type: \"LOGOUT_USER\" })\n    },\n\n    addUser(payload) {\n        return function(dispatch){\n            fetch(`${API}/users`, {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                body: JSON.stringify( payload )\n            })\n                .then(resp => resp.json())\n                .then(user => dispatch({type: \"LOGIN_USER\", payload: user}) )\n        }\n    },  \n\n    deleteUser(id) {\n        return function (dispatch) {\n            fetch(`${API}/users/${id}`, {\n                method: \"DELETE\",\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n                }\n            })\n                .then(() => dispatch({type: \"LOGOUT_USER\"}))\n        }\n    },\n\n    editUser(payload) {\n        return function (dispatch) {\n            fetch(`${API}/users/${payload.id}`, {\n                method: \"PATCH\",\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            })\n                .then(resp => resp.json())\n                .then(user => dispatch({type: \"EDIT_USER\", payload: user}))\n        }\n    },\n\n    returningUser(payload) {\n        return({ type: \"RETURNING_USER\", payload: payload})\n    },\n\n    getFeelings(userID) {\n        return function (dispatch) {\n            fetch(`${API}/feelings/user/${userID}`, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n                }\n            })\n                .then(resp => resp.json())\n                .then(feelings => dispatch({ type: \"GET_FEELINGS\", payload: feelings }))\n        }\n    }\n}","import React, { Component } from 'react';\nimport { Card, Icon, List, Container } from 'semantic-ui-react';\nimport { pollenOrMold } from './pollenormold';\n\nexport class FeelingsCard extends Component {\n\n    formatMonthDayYear = (date) => {\n            const dateObject = new Date(date)\n            const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n            const month = months[dateObject.getMonth()]\n            const numDay = dateObject.getUTCDate()\n            const year = dateObject.getFullYear()\n\n        return month + ' ' + numDay + ', ' + year\n    }\n\n    getHighest = (day, sporeType) => {\n        let list = []\n        Object.keys(day).forEach(key => {\n            if (sporeType === pollenOrMold(key)) {\n                list.push(key)\n            }\n        })\n        const limitedList = list.filter((item) => Number(day[item]) > 0)\n        const sortedList = limitedList.sort((a, b) => Number(day[b]) - Number(day[a]))\n\n        return sortedList.slice(0, 4)\n\n    }\n    getSporeList = (day) => {\n        const spores = this.getHighest(day, \"pollen\").concat(this.getHighest(day, \"mold\"))\n        const sporeIcon = (spore) => {\n            if (pollenOrMold(spore) === 'pollen') {\n                return <List.Icon name=\"tree\" color=\"orange\"/>\n            } else {\n                return <List.Icon name=\"theme\" color=\"teal\" />\n            }\n        } \n\n        return (\n            spores.map((spore, index) => {\n                return <List.Item key={index} > \n                    {sporeIcon(spore)}\n                    <List.Content> {`${spore.replace(\"___\", \" / \").replace(/_/g, \" \")} (${day[spore]})`} </List.Content>\n                </List.Item>\n            })\n        )\n    }\n\n    renderBadSporeList = () => {\n        const spores = this.getSporeList(this.props.feeling.day)\n        if(spores.length === 0) {\n            return (\n                <Card.Description>If you're allergic to something, it looks like it wasn't in the air that day.</Card.Description>\n            )\n        } else {\n            return (\n                <Container>\n                    <Card.Description>You might be allergic to: (count/m³)</Card.Description>\n                    <List >\n                        {spores}\n                    </List>\n                </Container>\n            )\n        }\n    }\n\n    renderNotBadSporeList = () => {\n        const spores = this.getSporeList(this.props.feeling.day)\n        if(spores.length === 0) {\n            return null\n        } else {\n            return (\n                <Container>\n                    <Card.Description>You might not be allergic to: (count/m³)</Card.Description>\n                    <List>\n                        {spores}\n                    </List>\n                </Container>\n            )\n        }\n    }\n\n    render() {\n        let isGoodFeeling\n        if (this.props.feeling.feeling.rating > 3) {\n            isGoodFeeling = true\n        } else {\n            isGoodFeeling = false\n        }\n        return (\n            <Card link color={isGoodFeeling ? \"green\" : \"red\"} >\n                <Card.Content>\n                    <Icon name={isGoodFeeling ? 'thumbs up outline' : 'thumbs down outline'} color={isGoodFeeling ? \"green\" : \"red\"}/>\n                    <Card.Header>{this.formatMonthDayYear(this.props.feeling.day.fulldate)} </Card.Header>\n                    {isGoodFeeling ? this.renderNotBadSporeList() : this.renderBadSporeList()}\n                </Card.Content>\n                <Card.Meta>\n                    <Icon circular name=\"tree\" color=\"orange\" />pollen\n                    <Icon circular name=\"theme\" color=\"teal\" />mold\n                </Card.Meta>\n            </Card>\n        );\n    }\n}\n\n// export const FeelingsCard;\n","import React, { Component } from 'react';\nimport { Card, Container, Divider, Icon } from 'semantic-ui-react';\nimport { FeelingsCard } from '../components/feelingsCard';\nimport { FeelingsForm } from '../components/feelingsForm';\nimport { connect } from 'react-redux';\nimport { feelings_actions } from '../../state/actions/feelings_actions';\n\nclass _FeelingsContainer extends Component {\n\n    async componentDidMount() {\n        await this.props.currentUser\n        await this.props.getFeelings(this.props.currentUser.id)\n    }\n\n    todaysFeeling = () => {\n        if (this.props.feelings.find((feel) => feel.day.fulldate === this.props.date.toJSON().slice(0, 10))) {\n            return null\n        } else {\n            return <FeelingsForm date={this.props.date} />\n        }\n    }\n\n    render() {\n        if (this.props.feelings){\n            return (\n                <Container>\n                    {this.todaysFeeling()}\n                    <Divider />\n                    <Card.Group centered>\n                        {this.props.feelings.map(feeling => <FeelingsCard key={feeling.feeling.id} feeling={feeling} /> )}\n                        {/* <Card link color='blue'>\n                            <Card.Content>\n                            <Icon name=\"hand rock outline\" />\n                            <Card.Description>Add a feeling for another day</Card.Description>\n                            </Card.Content>\n                        </Card> */}\n                    </Card.Group>\n                </Container>\n            )\n        } else {\n            return <Icon loading name='spinner' />\n        }\n    }\n}\n\nexport const FeelingsContainer = connect(null, feelings_actions)(_FeelingsContainer);","import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\nimport { Header, Container, Icon, Button, Card } from 'semantic-ui-react'\nimport { UserForm } from \"../components/userForm\";\nimport { user_actions } from '../../state/actions/user_actions';\nimport { FeelingsContainer } from \"./feelingsContainer\";\n\nclass _User extends Component {\n\n    state = {\n        date: new Date(),\n        showEdit: false\n    }\n\n    async componentDidMount() {\n        if(this.props.currentUser.id) {\n            await this.props.getFeelings(this.props.currentUser.id)\n        }\n    }\n\n    dataOrEdit = () => {\n        if (this.state.showEdit) {\n            return <UserForm currentUser={this.props.currentUser} \n                closeForm={() => this.setState({ showEdit: false })} \n                editUser={this.props.editUser} />\n            \n        } else {\n            let areYouSneezy\n            if (this.props.currentUser.email === \"sneezy@fairy.land\") {\n                areYouSneezy = true\n            }\n            return(\n                <Container>\n                    <Card.Group centered>\n                    {areYouSneezy ? null :\n                            <Button.Group vertical>\n                                <Button icon primary onClick={() => this.setState({ showEdit: true })}><Icon name=\"edit\"/> Edit</Button>\n                                <Button icon color='red' onClick={() => this.props.deleteUser(this.props.currentUser.id)}><Icon name=\"trash alternate\"/>Delete</Button>\n                            </Button.Group>\n                    }\n\n                    {/* <Segment.Group horizontal raised compact> */}\n                        <Card>\n                        {/* <Segment > */}\n                            <Header as='h2' >\n                                <Icon name='user circle' />\n                                <Header.Content>\n                                    {this.props.currentUser.username}\n                                </Header.Content>\n                            </Header>\n                        {/* </Segment> */}\n                        </Card>\n                        <Card>\n                        {/* <Segment> */}\n                            <Header as='h2' >\n                                <Icon name='mail' />\n                                <Header.Content>\n                                    {this.props.currentUser.email}\n                                </Header.Content>\n                            </Header>\n                        {/* </Segment> */}\n                        </Card>\n                    </Card.Group>\n                    {/* </Segment.Group> */}\n                    <br />\n                    <FeelingsContainer currentUser={this.props.currentUser} feelings={this.props.feelings} date={this.state.date} />\n                </Container>\n            )\n        }\n    }\n\n    render() {\n        return(\n            this.dataOrEdit()\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentUser: state.currentUser,\n    feelings: state.feelings\n})\n\nexport const User = connect(mapStateToProps, user_actions)(_User)","import React, { Component } from 'react';\nimport { Container, Card } from 'semantic-ui-react';\nimport { API } from '../../state/API';\nimport { Link } from 'react-router-dom';\n\nexport class UserList extends Component {\n\n    state = {\n        users: []\n    }\n\n    componentDidMount(){\n        fetch(`${API}/users`)\n            .then(res => res.json())\n            .then(users => {\n                this.setState({ users });\n            });\n    }\n\n    render() {\n        return (\n            <Container>\n                {this.state.users.map( (user, index) => {\n                    return  (\n                        <Card key={index} >\n                            <Card.Content>\n                                <Card.Header as={Link} to={`/user/${user.id}`} >{user.username}</Card.Header>\n                                <Card.Description>{user.email}</Card.Description>\n                            </Card.Content>\n                        </Card>\n                    )\n                })}\n            </Container>\n        );\n    }\n}\n\n","import React, { Component } from \"react\";\nimport { Form, Container, Icon, Header, Message } from 'semantic-ui-react'\nimport { user_actions } from '../../state/actions/user_actions';\nimport { connect } from 'react-redux';\n\nclass _Login extends Component {\n\n    state = {\n        email: '',\n        password: ''\n    }\n\n    handleOnChange = (e) => {\n        this.setState({ \n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleOnSubmit = (e) => {\n        e.preventDefault()\n        this.props.login(this.state)\n    }\n\n    errorBox() {\n        let errorMessage = this.props.error\n        if (errorMessage){\n            return <Message negative \n                header=\"Unable to login\"\n                content={errorMessage} />\n        }\n    }\n\n    render(){\n        return (\n            <Container>\n                {this.errorBox()}\n                <Header as='h2' icon>\n                    <Icon name='sign-in' />\n                    Log In\n                    <Header.Subheader>How are you feeling today?</Header.Subheader>\n                </Header>\n                <Form onSubmit={this.handleOnSubmit} >\n                    <Form.Input fluid \n                        name='email' \n                        label='Email' \n                        value={this.state.email} \n                        onChange = {this.handleOnChange} \n                        />\n                    <Form.Input fluid \n                        name='password' \n                        label='Password' \n                        value={this.state.password} \n                        type='password' \n                        onChange={this.handleOnChange} \n                        />\n                        <Form.Button>Login</Form.Button>\n                </Form>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentUser: state.currentUser,\n    error: state.error\n})\n\nexport const Login = connect(mapStateToProps, user_actions)(_Login)","import React, { Component } from 'react';\nimport { Header, Icon, Container } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { UserForm } from '../components/userForm';\nimport { user_actions } from '../../state/actions/user_actions';\n\nclass _Signup extends Component {\n    render() {\n        return (\n            <Container>\n                <Header as='h2' icon>\n                    <Icon name='signup' />\n                    Sign Up\n                    <Header.Subheader>Over time, you can learn what pollens or molds you're allergic to</Header.Subheader>\n                </Header>\n                <UserForm currentUser={{username: '', email: ''}} addUser={this.props.addUser} />\n            </Container>\n        );\n    }\n}\n\n\nexport const Signup = connect(null, user_actions)(_Signup);\n","import React, { Component } from 'react';\nimport { Form, Grid } from 'semantic-ui-react';\nimport { Calendar } from 'react-calendar'\n// TODO: refactor into one function\n// TODO: figure out how to get DateRangePicker to render right, or find something better\n// import DateRangePicker from '@wojtekmaj/react-daterange-picker'\n\nexport class DaysFormPast extends Component {\n\n    state = {\n        dates: [\n            new Date('2015-02-01'),\n            new Date('2015-04-30')\n        ],\n        formParams: {\n            mindate: new Date(\"2013-01-01\"),\n            maxdate: new Date(\"2999-12-31\"),\n            mindetail: 'decade',\n        }\n    }\n\n    handleOnChangeCalendar = date => this.setState({ dates: date })\n\n    handleOnSubmit = (e) => {\n        e.preventDefault()\n        this.props.getDays(this.state)\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleOnSubmit} >\n                <Form.Button color='blue'>Submit</Form.Button>\n                <Grid relaxed columns={2}>\n                    <div>\n                        <Grid.Column >\n                            <Calendar responsive\n                                minDate={this.state.formParams.mindate}\n                                maxDate={this.state.formParams.maxdate}\n                                minDetail={this.state.formParams.mindetail}\n                                selectRange={true}\n                                onChange={this.handleOnChangeCalendar}\n                                value={this.state.dates}\n                                calendarType=\"US\"\n                            />\n                        </Grid.Column>\n                    </div>\n                    <Grid.Column>\n                        <Form.Group widths='equal'>\n                            <Form.Input readOnly fluid label=\"Start Date\" value={this.state.dates[0].toDateString().slice(4, 15)} />\n                            <Form.Input readOnly fluid label=\"End Date\" value={this.state.dates[1].toDateString().slice(4, 15)} />\n                        </Form.Group>\n                    </Grid.Column>\n                </Grid>\n            </Form>\n        );\n    }\n}\n\nexport class DaysFormFuture extends Component {\n\n    state = {\n        dates: [\n            new Date('2000-04-24'),\n            new Date('2000-05-08')\n        ],\n        formParams: {\n            mindate: new Date(\"2000-01-01\"),\n            maxdate: new Date(\"2000-12-31\"),\n            mindetail: 'year',\n        }\n    }\n\n    handleOnChangeCalendar = date => this.setState({ dates: date })\n\n    handleOnSubmit = (e) => {\n        e.preventDefault()\n        this.props.getDays(this.state)\n    }\n\n    render() {\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\n        return (\n            <Form onSubmit={this.handleOnSubmit} >\n                <Form.Button color='blue'>Submit</Form.Button>\n                <Grid relaxed columns={2}>\n                    <Grid.Column>\n                        <Calendar\n                            navigationLabel={({ date }) => `${months[date.getMonth()]}`}\n                            minDate={this.state.formParams.mindate}\n                            maxDate={this.state.formParams.maxdate}\n                            minDetail={this.state.formParams.mindetail}\n                            selectRange={true}\n                            onChange={this.handleOnChangeCalendar}\n                            value={this.state.dates}\n                            calendarType=\"US\"\n                        />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Group widths='equal'>\n                            <Form.Input readOnly fluid label=\"Start Date\" value={this.state.dates[0].toDateString().slice(4, 10)} />\n                            <Form.Input readOnly fluid label=\"End Date\" value={this.state.dates[1].toDateString().slice(4, 10)} />\n                        </Form.Group>\n                    </Grid.Column>\n                </Grid>\n            </Form>\n        );\n    }\n}\n\n// export default DaysForm;","import React, { Component } from 'react';\nimport { Container, Divider, Header } from 'semantic-ui-react';\nimport { DaysFormPast, DaysFormFuture } from '../components/daysForm';\nimport { connect } from 'react-redux';\nimport { days_actions } from '../../state/actions/days_actions';\nimport { Chart } from '../components/chart';\nimport { withRouter } from 'react-router';\n\nclass _DaysContainer extends Component {\n\n    pastOrFuture = (url) => {\n        if (url === '/future') {\n            return (\n                <Container>\n                    <Header>Get forecasts for coming days</Header>\n                    <Chart days={this.props.days} />\n                    <Header.Subheader disabled>Average reading for a given day of the year</Header.Subheader>\n                    <Divider />\n                    <DaysFormFuture getDays={this.props.getDays} />\n                </Container>\n\n            );\n        } else if (url === '/past') {\n\n            return (\n                <Container>\n                    <Header>See data for past dates</Header>\n                    <Chart days={this.props.days} />\n                    <Divider />\n                    <DaysFormPast getDays={this.props.getDays} />\n                </Container>\n\n            ) \n        }\n\n    }\n\n    render() {\n        return this.pastOrFuture(this.props.location.pathname)\n    }\n}\n\nconst mapStateToProps = state => ({\n    days: state.days\n})\n\nexport const DaysContainer = withRouter(connect(mapStateToProps, days_actions)(_DaysContainer));\n","import React, { Component } from 'react';\nimport { Router } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router\";\nimport { connect } from \"react-redux\";\nimport history from \"./state/history\";\nimport { NavBar } from \"./views/components/navbar\";\nimport { Home } from \"./views/containers/home\";\nimport { User } from \"./views/containers/user\";\nimport { UserList } from \"./views/components/userlist\"\nimport { Login } from \"./views/components/login\";\nimport { Signup } from \"./views/containers/signup\";\nimport { user_actions } from './state/actions/user_actions';\nimport { DaysContainer } from './views/containers/days_container';\n\nclass _App extends Component {\n\n  componentDidMount(){\n    const currentUser = localStorage.getItem(\"currentUser\")\n    if (currentUser) {\n      this.props.returningUser(JSON.parse(currentUser))\n    }\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <div>\n          <NavBar currentUser = {this.props.currentUser} logout = {this.props.logout} />\n          <Switch>\n            <Route path=\"/past\" component={DaysContainer} />\n            <Route path=\"/future\" component={DaysContainer} />\n            <Route path=\"/signup\" component={Signup} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/user/:id\" render = {(props) => <User {...props} /> } />\n            <Route path=\"/user/\" component={UserList} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentUser: state.currentUser\n})\n\nexport const App = connect(mapStateToProps, user_actions)(_App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport 'semantic-ui-css/semantic.min.css'\nimport { store } from './state/store';\n\nReactDOM.render(<Provider store={store}> <App /> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}